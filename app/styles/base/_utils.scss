// #UTILS

@function parse-int($n) {
  @return $n / ($n * 0 + 1);
}

%vertical-align {
  position: relative;
  top: 50%;
  transform: translateY(-50%);
}

@mixin background-image-svg($name, $width, $height) {
  background-image: url('#{$name}.png'); // IE8 & below
  background-image: none, url('#{$name}.svg');
  background-size: $width $height;
}

@mixin truncate($width: 100%) {
  text-overflow: ellipsis;
  overflow: hidden;
  width: $width;
  white-space: nowrap;
}

@mixin media-query($media-query) {

  @if $media-query == xs-only {
    @media only screen and (max-width: $screen-xs - 1) {
      @content;
    }
  }

  @if $media-query == sm {
    @media only screen and (min-width: $screen-xs) {
      @content;
    }
  }

  @if $media-query == sm-only {
    @media only screen and (max-width: $screen-sm - 1) {
      @content;
    }
  }

  @if $media-query == md {
    @media only screen and (min-width: $screen-sm) {
      @content;
    }
  }

  @if $media-query == lg {
    @media only screen and (min-width: $screen-md) {
      @content;
    }
  }

  @if $media-query == xl {
    @media only screen and (min-width: $screen-lg) {
      @content;
    }
  }

  @if $media-query == retina {
    @media (min--moz-device-pixel-ratio: 2), (-o-min-device-pixel-ratio: 2/1), (-webkit-min-device-pixel-ratio: 2), (min-device-pixel-ratio: 2) {
      @content;
    }
  }
}

// Just mqs helpers...

@mixin xs-only {
  @include media-query(xs-only) {
    @content;
  }
}

@mixin sm {
  @include media-query(sm) {
    @content;
  }
}

@mixin sm-only {
  @include media-query(sm-only) {
    @content;
  }
}

@mixin md {
  @include media-query(md) {
    @content;
  }
}

@mixin lg {
  @include media-query(lg) {
    @content;
  }
}

@mixin xl {
  @include media-query(xl) {
    @content;
  }
}

@mixin retina {
  @include media-query(retina) {
    @content;
  }
}

@mixin material-box-shadow($level: 1) {
  @if $level == 1 {
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.12), 0 1px 2px rgba(0, 0, 0, 0.24);
  }
  @if $level == 2 {
    box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0, 0, 0, 0.23);
  }
  @if $level == 3 {
    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.19), 0 6px 6px rgba(0, 0, 0, 0.23);
  }
  @if $level == 4 {
    box-shadow: 0 14px 28px rgba(0, 0, 0, 0.25), 0 10px 10px rgba(0, 0, 0, 0.22);
  }
  @if $level == 5 {
    box-shadow: 0 19px 38px rgba(0, 0, 0, 0.3), 0 15px 12px rgba(0, 0, 0, 0.22);
  }
}

@mixin vertical-align($top: 50%) {
  position: relative;
  top: $top;
  transform: translateY(-$top);
}

@mixin radial-gradient($from-color, $to-color) {
  background-color: $to-color;
  background-image: radial-gradient(ellipse at top, $from-color 0%, $to-color 100%);
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='$from-color', endColorstr='$to-color', GradientType=1);
}

@mixin dashed-border($dashlength,
$spacelength,
$borderwidth,
$color,
$position: top) {
  $per: percentage($dashlength / ($dashlength + $spacelength));
  background-image: linear-gradient(to right, $color 0%, $color $per, rgba(0, 0, 0, 0) $per);
  background-position: 0 $position;
  background-size: ($dashlength + $spacelength) $borderwidth;
  background-repeat: repeat-x;
}

@mixin dashed-border-vertical($dashlength,
$spacelength,
$borderwidth,
$color,
$position: left) {
  $per: percentage($dashlength / ($dashlength + $spacelength));
  background-image: linear-gradient(to bottom, $color 0%, $color $per, rgba(0, 0, 0, 0) $per);
  background-position: $position 0;
  background-size: $borderwidth ($dashlength + $spacelength);
  background-repeat: repeat-y;
}


/**
 * Jagged Border
 *
 * $location - [top, bottom, left, right]
 * $type - [fill, border]
 * $side - [inside, outside]
 *
 * @param {Object} data - xhr
 */

@mixin jagged($color: 000, $size: 16, $location: bottom, $type: fill, $side: outside, $animate: false) {
  @if str-index(#{$color}, '#') > 0 {
    $color: str-slice(#{$color}, 2);
  }

  $width: $size;
  $height: $width / 2;
  $scale: $width / 16;
  $rotate: '0';
  $pseudo: if($location == top or $location == left, before, after);

  @if $side == inside {
    @if $location == bottom {
      $rotate: '180 8 4';
    } @else if $location == left {
      $height: $size;
      $rotate: '270 8 8';
      $width: $size / 2;
    } @else if $location == right {
      $height: $size;
      $rotate: '90 4 4';
      $width: $size / 2;
    }
  }
  @else {
    @if $location == top {
      $rotate: '180 8 4';
    } @else if $location == right {
      $rotate: '270 8 8';
      $height: $size;
      $width: $size / 2;
    } @else if $location == left {
      $rotate: '90 4 4';
      $height: $size;
      $width: $size / 2;
    }
  }
  $arrow: "data:image/svg+xml,%3Csvg%20width%3D%22#{$width}px%22%20height%3D%22#{$height}px%22%20version%3D%221.1%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%3Cpolygon%20points%3D%220%2C%200%208%2C%208%2016%2C0%22%20fill%3D%22%23#{$color}%22%20transform%3D%22scale%28#{$scale}%29%20rotate%28#{$rotate}%29%22%3E%3C%2Fpolygon%3E%3C%2Fsvg%3E";
  $wave: "data:image/svg+xml,%3Csvg%20width%3D%22#{$width}px%22%20height%3D%22#{$height}px%22%20version%3D%221.1%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%3Cpath%20d%3D%22M8.00025863%2C0%20L0%2C6.59417725%20L0%2C8%20L8.00025885%2C1.40509033%20L16%2C8%20L16%2C6.59417725%20L8.00025863%2C0%20Z%22%20fill%3D%22%23#{$color}%22%20transform%3D%22scale%28#{$scale}%29%20rotate%28#{$rotate}%29%22%3E%3C%2Fpath%3E%3C%2Fsvg%3E";
  position: relative;

  &:#{$pseudo} {
    content: '';
    position: absolute;
    z-index: 10;

    @if $animate {
      animation-duration: $animate;
      animation-iteration-count: 1;
      animation-name: if($location == bottom or $location == top, slide-hoz, slide-vet);
    }

    @if $location == top {
      height: #{$height}px;
      left: 0;
      right: 0;

      @if $side == inside {
        top: 0;
      } @else {
        top: -#{$height}px;
      }
    }
    @else if $location == right {
      bottom: 0;
      top: 0;
      width: #{$width}px;

      @if $side == inside {
        right: 0;
      } @else {
        right: -#{$width}px;
      }
    }
    @else if $location == bottom {
      height: #{$height}px;
      left: 0;
      right: 0;

      @if $side == inside {
        bottom: 0;
      } @else {
        bottom: -#{$height}px;
      }
    }
    @else if $location == left {
      bottom: 0;
      top: 0;
      width: #{$width}px;

      @if $side == inside {
        left: 0;
      } @else {
        left: -#{$width}px;
      }
    }

    @if $location == top {
      @if $side == inside {
        background-image: url($arrow);
      } @else {
        @if $type == fill {
          background-image: url($arrow);
        } @else {
          background-image: url($wave);
        }
      }

    }
    @else {
      @if $side == inside {
        background-image: url($arrow);
      } @else {
        @if $type == fill {
          background-image: url($arrow);
        } @else {
          background-image: url($wave);
        }
      }
    }
  }

  @keyframes slide-hoz {
    from {
      width: 0;
    }

    to {
      width: 100%;
    }
  }

  @keyframes slide-vet {
    from {
      height: 0;
    }

    to {
      height: 100%;
    }
  }
}
